{"version":3,"sources":["redux/types.ts","redux/actions/alertActions.ts","components/Search.tsx","redux/actions/weatherActions.ts","components/Alert.tsx","components/Weather.tsx","redux/selectors.ts","App.tsx","redux/reducers/weatherReducer.ts","redux/reducers/alertReducer.ts","redux/index.ts","index.tsx"],"names":["GET_WEATHER","SET_LOADING","SET_ERROR","SET_ALERT","setAlert","message","type","payload","Search","title","useState","city","setCity","dispatch","useDispatch","className","onSubmit","e","preventDefault","trim","a","fetch","process","res","ok","json","resData","Error","getWeather","placeholder","value","onChange","target","style","maxWidth","margin","Alert","onClose","onClick","justifyContent","Weather","data","fahrenheit","main","temp","toFixed","celsius","marginBottom","name","sys","country","alignItems","weather","description","src","icon","alt","humidity","pressure","wind","speed","state","getLoading","loading","getError","error","getAlertMsg","alert","App","weatherData","useSelector","alertMsg","initialState","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25bca76e.chunk.js","sourcesContent":["export const GET_WEATHER = 'GET_WEATHER';\nexport const SET_LOADING = 'SET_LOADING';\nexport const SET_ERROR = 'SET_ERROR';\nexport const SET_ALERT = 'SET_ALERT';\n\nexport interface Weather {\n  description: string;\n  icon: string;\n  id: number;\n  main: string;\n}\n\nexport interface WeatherData {\n  base: string;\n  clouds: {\n    all: number;\n  };\n  cod: number;\n  coord: {\n    lon: number;\n    lat: number;\n  };\n  dt: number;\n  id: number;\n  main: {\n    feels_like: number;\n    humidity: number;\n    pressure: number;\n    temp: number;\n    temp_max: number;\n    temp_min: number;\n  };\n  name: string;\n  sys: {\n    country: string;\n    id: number;\n    sunrise: number;\n    sunset: number;\n    type: number;\n  };\n  timezone: number;\n  visibility: number;\n  weather: Weather[];\n  wind: {\n    speed: number;\n    deg: number;\n  };\n}\n\nexport interface WeatherError {\n  cod: string;\n  message: string;\n}\n\nexport interface WeatherState {\n  data: WeatherData | null;\n  loading: boolean;\n  error: string;\n}\n\ninterface GetWeatherAction {\n  type: typeof GET_WEATHER;\n  payload: WeatherData;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\ninterface SetErrorAction {\n  type: typeof SET_ERROR;\n  payload: string;\n}\n\nexport type WeatherAction =\n  | GetWeatherAction\n  | SetLoadingAction\n  | SetErrorAction;\n\nexport interface AlertAction {\n  type: typeof SET_ALERT;\n  payload: string;\n}\n\nexport interface AlertState {\n  message: string;\n}\n","import { SET_ALERT, AlertAction } from '../types';\n\nexport const setAlert = (message: string): AlertAction => {\n  return {\n    type: SET_ALERT,\n    payload: message,\n  };\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getWeather, setLoading } from 'redux/actions/weatherActions';\nimport { setAlert } from 'redux/actions/alertActions';\n\ninterface SearchProps {\n  title: string;\n}\n\nconst Search = ({ title }: SearchProps) => {\n  const [city, setCity] = useState<string>('');\n  const dispatch = useDispatch();\n\n  const changeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setCity(e.target.value);\n  };\n\n  const submitHandler = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (city.trim() === '') {\n      return dispatch(setAlert('City is required!'));\n    }\n\n    dispatch(setLoading());\n    dispatch(getWeather(city));\n    setCity('');\n  };\n\n  return (\n    <div className=\"hero is-light has-text-centered\">\n      <div className=\"hero-body\">\n        <div className=\"container\">\n          <h1 className=\"title\">{title}</h1>\n          <form className=\"py-5\" onSubmit={submitHandler}>\n            <input\n              type=\"text\"\n              className=\"input has-text-centered mb2\"\n              placeholder=\"Enter city name\"\n              value={city}\n              onChange={changeHandler}\n              style={{ maxWidth: 300 }}\n            />\n            <button\n              className=\"button is-primary is-fullwidth\"\n              style={{ maxWidth: 300, margin: '0 auto' }}\n            >\n              Search\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Search;\n","import { ThunkAction } from 'redux-thunk';\nimport { RootState } from '..';\nimport {\n  WeatherAction,\n  WeatherData,\n  WeatherError,\n  GET_WEATHER,\n  SET_LOADING,\n  SET_ERROR,\n} from '../types';\n\nexport const getWeather = (\n  city: string,\n): ThunkAction<void, RootState, null, WeatherAction> => {\n  return async dispatch => {\n    try {\n      const res = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.REACT_APP_API_KEY}`,\n      );\n\n      if (!res.ok) {\n        const resData: WeatherError = await res.json();\n        throw new Error(resData.message);\n      }\n\n      const resData: WeatherData = await res.json();\n      dispatch({\n        type: GET_WEATHER,\n        payload: resData,\n      });\n    } catch (error) {\n      dispatch({\n        type: SET_ERROR,\n        payload: error.message,\n      });\n    }\n  };\n};\n\nexport const setLoading = (): WeatherAction => {\n  return {\n    type: SET_LOADING,\n  };\n};\n\nexport const setError = (): WeatherAction => {\n  return {\n    type: SET_ERROR,\n    payload: '',\n  };\n};\n","import React from 'react';\n\ninterface AlertProps {\n  message: string;\n  onClose: () => void;\n}\n\nconst Alert = ({ message, onClose }: AlertProps) => {\n  return (\n    <div className=\"modal is-active has-text-centered\">\n      <div className=\"modal-background\" onClick={onClose}></div>\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head has-background-danger\">\n          <p className=\"modal-card-title has-text-white\">{message}</p>\n        </header>\n        <footer\n          className=\"modal-card-foot\"\n          style={{ justifyContent: 'center' }}\n        >\n          <button className=\"button\" onClick={onClose}>\n            Close\n          </button>\n        </footer>\n      </div>\n    </div>\n  );\n};\n\nexport default Alert;\n","import React from 'react';\nimport { WeatherData } from 'redux/types';\n\ninterface WeatherProps {\n  data: WeatherData;\n}\n\nconst Weather = ({ data }: WeatherProps) => {\n  const fahrenheit = (data.main.temp * 1.8 - 459.67).toFixed(1);\n  const celsius = (data.main.temp - 273.15).toFixed(1);\n\n  return (\n    <section className=\"section\">\n      <div className=\"container\">\n        <h1 className=\"title has-text-centered\" style={{ marginBottom: 50 }}>\n          {data.name} - {data.sys.country}\n        </h1>\n        <div className=\"level\" style={{ alignItems: 'flex-start' }}>\n          <div className=\"level-item has-text-centered\">\n            <div>\n              <p className=\"heading\">{data.weather[0].description}</p>\n              <p className=\"title\">\n                <img\n                  src={`http://openweathermap.org/img/wn/${data.weather[0].icon}.png`}\n                  alt=\"\"\n                />\n              </p>\n            </div>\n          </div>\n          <div className=\"level-item has-text-centered\">\n            <div>\n              <p className=\"heading\">temp</p>\n              <div className=\"title\">\n                <p className=\"mb-2\">{data.main.temp}K</p>\n                <p className=\"mb-2\">\n                  {fahrenheit}\n                  <sup>&#8457;</sup>\n                </p>\n                <p>\n                  {celsius}\n                  <sup>&#8451;</sup>\n                </p>\n              </div>\n            </div>\n          </div>\n          <div className=\"level-item has-text-centered\">\n            <div>\n              <p className=\"heading\">humidity</p>\n              <p className=\"title\">{data.main.humidity}</p>\n            </div>\n          </div>\n          <div className=\"level-item has-text-centered\">\n            <div>\n              <p className=\"heading\">pressure</p>\n              <p className=\"title\">{data.main.pressure}</p>\n            </div>\n          </div>\n          <div className=\"level-item has-text-centered\">\n            <div>\n              <p className=\"heading\">wind</p>\n              <p className=\"title\">{data.wind.speed} m/s</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Weather;\n","import { RootState } from 'redux';\n\nexport const getWeather = (state: RootState) => state.weather.data;\nexport const getLoading = (state: RootState) => state.weather.loading;\nexport const getError = (state: RootState) => state.weather.error;\nexport const getAlertMsg = (state: RootState) => state.alert.message;\n","import React, { FC } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.css';\n\nimport Search from './components/Search';\nimport Alert from './components/Alert';\nimport Weather from './components/Weather';\nimport { setAlert } from 'redux/actions/alertActions';\nimport { setError } from 'redux/actions/weatherActions';\nimport { getWeather, getAlertMsg, getError, getLoading } from 'redux/selectors';\n\nconst App: FC = () => {\n  const dispatch = useDispatch();\n  const weatherData = useSelector(getWeather);\n  const loading = useSelector(getLoading);\n  const error = useSelector(getError);\n  const alertMsg = useSelector(getAlertMsg);\n\n  return (\n    <div className=\"has-text-centered\">\n      <Search title=\"Enter city name and press search button\" />\n      {loading ? (\n        <h2 className=\"is-size-3 py2\">Loading...</h2>\n      ) : (\n        weatherData && <Weather data={weatherData} />\n      )}\n\n      {alertMsg && (\n        <Alert\n          message={alertMsg}\n          onClose={() => dispatch(setAlert(alertMsg))}\n        />\n      )}\n      {error && <Alert message={error} onClose={() => dispatch(setError())} />}\n    </div>\n  );\n};\n\nexport default App;\n","import {\n  WeatherAction,\n  WeatherState,\n  GET_WEATHER,\n  SET_LOADING,\n  SET_ERROR,\n} from '../types';\n\nconst initialState: WeatherState = {\n  data: null,\n  loading: false,\n  error: '',\n};\n\n/* eslint import/no-anonymous-default-export: [2, {\"allowArrowFunction\": true}] */\n\nexport default (state = initialState, action: WeatherAction): WeatherState => {\n  switch (action.type) {\n    case GET_WEATHER:\n      return {\n        data: action.payload,\n        loading: false,\n        error: '',\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    case SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\n","import { SET_ALERT, AlertAction, AlertState } from './../types';\n\nconst initialState: AlertState = {\n  message: '',\n};\n\n/* eslint import/no-anonymous-default-export: [2, {\"allowArrowFunction\": true}] */\n\nexport default (state = initialState, action: AlertAction): AlertState => {\n  switch (action.type) {\n    case SET_ALERT:\n      return {\n        message: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import {\n  createStore,\n  applyMiddleware,\n  combineReducers,\n} from '../../node_modules/redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport weatherReducer from './reducers/weatherReducer';\nimport alertReducer from './reducers/alertReducer';\n\nconst rootReducer = combineReducers({\n  weather: weatherReducer,\n  alert: alertReducer,\n});\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from './redux';\nimport '../node_modules/bulma/css/bulma.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}